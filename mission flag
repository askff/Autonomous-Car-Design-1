
#include <Wire.h>
#include <LSM303.h>

#define THRESHOLD_ANGLE 10
#define THRESHOLD_ANGLE1 15
#define THRESHOLD_ANGLE2 7

#define NO_MISSION 4 // 추후에 수정 8개 정도

bool mission_flag[NO_MISSION]={0,0,0,0};
int flag_runner = -1;

LSM303 compass;

float heading_angle = 0.0;
float init_heading_angle = 17.0;
float target_heading_angle = 90;
float heading_angle_error = 0.0;

#define IN1 29
#define IN2 28
#define ENA 10
#define IN3 30
#define IN4 31
#define ENB 11

void setup() 
{
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);

  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  Serial.begin(9600); // 통신속도를 115200으로 정의함

  Wire.begin();
  compass.init();
  compass.enableDefault();

  compass.m_min = (LSM303::vector<int16_t>){-32767, -32767, -32767};
  compass.m_max = (LSM303::vector<int16_t>){+32767, +32767, +32767};
}

void motor_A_control(int direction_a, int motor_speed_a) //모터 A의 방향(direction)과 속도(speed) 제어
{
  if(direction_a == HIGH)
  {
     digitalWrite(IN1, LOW); //모터의 방향 제어
     digitalWrite(IN2, HIGH);
     analogWrite(ENA,motor_speed_a); //모터의 속도 제어
    
  }
  else
  {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA,motor_speed_a);
  }
}

void motor_B_control(int direction_b, int motor_speed_b) //모터 A의 방향(direction)과 속도(speed) 제어
{
  if(direction_b == HIGH)
  {
     digitalWrite(IN3, LOW); //모터의 방향 제어
     digitalWrite(IN4, HIGH);
     analogWrite(ENB,motor_speed_b); //모터의 속도 제어
    
  }
  else
  {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB,motor_speed_b);
  }
}

int read_imu_sensor(void){
  compass.read();
  float heading1 = compass.heading();
  Serial.println(heading1);
  compass.read();
  float heading2 = compass.heading();
  Serial.println(heading2);
  float heading = (heading1+heading2)/2;


  
  Serial.println(heading);

  heading_angle_error = target_heading_angle - heading;

  if(heading_angle_error > 180)
  {
    heading_angle_error = heading_angle_error - 360;
  }
  else if(heading_angle_error < 180)
  {
    heading_angle_error = heading_angle_error + 360;
  }
  else{}
  
  Serial.print("Heading Angle Error: ");
  Serial.print(heading_angle_error);
  Serial.print(" = ");
  Serial.print(target_heading_angle);
  Serial.print(" - ");
  Serial.println(heading);

}

void imu_rotation(void)
{
  bool flag=1;
  while(flag)
  {
    read_imu_sensor();

    if(heading_angle_error > THRESHOLD_ANGLE1)
    {
        motor_A_control(LOW,50); 
        motor_B_control(HIGH,50);
    }
    else if((heading_angle_error >= THRESHOLD_ANGLE2)&&(heading_angle_error <= THRESHOLD_ANGLE1))
    {
        motor_A_control(LOW,40); 
        motor_B_control(HIGH,40);
    }
    else if((heading_angle_error > -THRESHOLD_ANGLE2)&&(heading_angle_error < THRESHOLD_ANGLE2))
    {
        motor_A_control(HIGH,0); 
        motor_B_control(HIGH,0);
        flag = 0;
    }
    else if((heading_angle_error >= -THRESHOLD_ANGLE1)&&(heading_angle_error <= -THRESHOLD_ANGLE2))
    {
        motor_A_control(HIGH,35); 
        motor_B_control(LOW,35);
    }
    else
    {
        motor_A_control(HIGH,35); 
        motor_B_control(LOW,35);
    }
  }


void loop(){
  target_heading_angle = 90;
  imu_rotation();

}
